# Promp para Copilot y colaboradores: Organización y lineamientos del proyecto

Este archivo contiene TODAS las reglas y lineamientos para el desarrollo y edición del proyecto **Argentina Aventura Familiar de 30 Días**.  
Toda nueva instrucción debe agregarse en este archivo, bajo el tema correspondiente.  
**No borres este archivo. Si surgen conflictos entre reglas, consultar a ari201070 antes de decidir.**

---

## 1. Objetivo general del proyecto

- Documentar y organizar un viaje familiar de un mes por Argentina, orientado a familias (pareja + 2 hijos), con información en español y hebreo.
- Se incluyen: itinerario, actividades, alojamientos, presupuesto, logística, consejos y recursos útiles, priorizando experiencia y comodidad familiar.

---

## 2. Estructura del proyecto

```
/ (raíz del proyecto)
├── index.html                         # Página principal del itinerario
├── Promp para github.txt              # Archivo de reglas original (NO BORRAR)
├── Promp-organizado-por-temas.txt     # Este archivo, versión ordenada y ampliable
├── docs/
│   ├── imagenes/
│   │   ├── buenosaires.jpg
│   │   ├── rosario.jpg
│   │   ├── bariloche.jpg
│   │   ├── ... (más imágenes por ciudad, en minúsculas y sin espacios)
│   └── ... (otros recursos/documentos de apoyo) ...
├── ciudades/
│   ├── buenosaires.html
│   ├── rosario.html
│   ├── bariloche.html
│   ├── ... (todas las ciudades y mapa interactivo) ...
├── css/   # Opcional, estilos compartidos
├── js/    # Opcional, scripts JS compartidos
├── README.md
└── ... (otros archivos como favicon, licencia, etc.)
```
- Todas las imágenes deben estar en `docs/imagenes/` y llamarse igual al nombre de la ciudad en minúsculas, sin espacios, con extensión `.jpg` (o `.png` si aplica).
- Todas las páginas de ciudad y el mapa están en la carpeta `ciudades/`.
- Todos los archivos auxiliares/documentación en `docs/`.
- Si usás módulos externos, podés agregar una carpeta `libs/`.

---

## 3. Reglas de entrega y edición de archivos

- **SIEMPRE entregar los archivos completos, de principio a fin, listos para copiar y pegar.**
- **No omitir nada de lo ya existente salvo pedido explícito.**
- **No dejar comentarios ambiguos como “el resto es igual” ni archivos parciales.**
- Al corregir, integrar o agregar módulos, conservar toda la estructura y contenido previo (sólo agregar o modificar lo necesario).
- ¿Conflicto entre pedidos? Consultar a ari201070 antes de decidir.

---

## 4. Consistencia visual y funcional

- Barra fija arriba a la derecha con botones de idioma y botón "Volver al itinerario".
- Uso de las mismas clases y estructura para todos los botones (idioma, moneda, volver).
- Foto de portada cargada desde `docs/imagenes/[ciudad].jpg` (o `.png` si corresponde) en todas las páginas de ciudad.
- Toda la estructura HTML y CSS debe ser igual en todas las ciudades (incluyendo IDs y clases para traducción automática y funcionalidad consistente).
- El menú de navegación, función de cambio de idioma y moneda, y botón "Volver al itinerario" deben funcionar igual en todas las páginas.
- El nombre de la imagen debe corresponder exactamente al nombre de la ciudad (minúsculas, sin espacios ni tildes).
- Las imágenes deben estar presentes en la carpeta correspondiente antes de publicar la página.
-Para que todas las páginas de ciudades sean consistentes y multi-idioma, solo necesitas que la barra superior tenga:

Botón: Español
Botón: עברית
Enlace: ⬅ Volver al itinerario (que también se traduce a hebreo automáticamente)
Copia el mismo bloque HTML y el mismo script que usa el diccionario con la clave "back-link".
Así, cuando cambies de idioma, el texto del enlace también cambia (por ejemplo, a:
⬅ חזרה למפת המסלול ).

---

## 5. Traducción dinámica y soporte multilenguaje

- Todos los textos, botones, títulos, placeholders y mensajes de error deben ser traducibles dinámicamente según el idioma elegido.
-El diccionario de traducción (translations) debe incluir todas las cadenas de texto del contenido.
- El selector de idioma debe cambiar textos y enlaces al idioma correspondiente.
- Al navegar, la selección de idioma se mantiene (usando localStorage o querystring).
- Todos los IDs y clases deben mantenerse igual para que la traducción funcione en todas las páginas.
- Los ítems de la lista de equipaje se traducen automáticamente al cambiar el idioma.
- La IA responde en el idioma en que se hace la pregunta.
-Soporte para texto de derecha a izquierda (RTL) en el idioma Hebreo

---

## 6. Herramientas interactivas y módulos especiales

### 6.1 Conversor de moneda

- Conversor interactivo moderno, ubicado al final de index.html (antes de `</body>`), con tasas reales y actualización diaria (Polygon.io o exchangerate.host).
- Conversor clásico en la tabla sigue funcionando con ARS/USD/ILS/EUR.
- Si el par directo no está disponible, la conversión se realiza usando USD como intermediario (ejemplo: ARS → USD → ILS).
- Solo monedas ARS, USD, EUR, ILS.
- El resultado de la conversión debe ser claro y visible.

### 6.2 Lista de equipaje

- Lista con esenciales y opcionales (selector para agregar ítems en la lista correspondiente).
- Agregar ítems traduce automáticamente al cambiar de idioma.
- El botón para agregar ítems debe ser visible y traducido.
- (Ideal: persistencia usando localStorage).

### 6.3 Consulta a IA

- Módulo de consulta a IA experto en viajes familiares en Argentina, al final de index.html.
- Puede ser mock (respuesta simulada) o conectado a Pyrefly o a una API real.
- El botón de consulta queda deshabilitado mientras responde.
- Manejo de errores: si la IA falla, mostrar mensaje claro en el idioma actual.
- Traducción de todos los textos y errores de IA.
- La respuesta debe mostrarse en el idioma de la pregunta.

---

## 7. Reglas para imágenes

- El nombre del archivo de la imagen será el nombre de la ciudad en minúsculas, sin espacios ni tildes y extensión .jpg.
- Deben estar presentes en `docs/imagenes/`.
- Descargar imágenes libres de Unsplash o equivalentes para cada ciudad.

---

## 8. Buenas prácticas y organización de datos/documentos

- Guardar los Excel/CSV fuente en subcarpetas específicas por temática en `docs/`.
- Si la app consume datos, agregar una carpeta `/data` con versiones en JSON.
- README(s) en Markdown explicando el propósito de cada carpeta y archivo.
- Mantener documentación clara y actualizada en `docs/`.
- No crear carpetas vacías: si es necesario, agregar un archivo `.gitkeep`.

---

## 9. Sincronización y enriquecimiento de contenidos

- Cada sección importante de la ciudad en su archivo .md debe reflejarse y ampliarse en la carpeta correspondiente en `docs/`.
- Las secciones de ciudad deben estar sincronizadas entre los .html, .md y la documentación `docs/`.
- Ejemplo: "Agenda de eventos" debe estar tanto en la página de la ciudad como en `docs/agenda/[ciudad]/README.md`.

---

## 10. Centralización de idioma y moneda

- El estado de idioma y moneda debe manejarse globalmente (centralizado, por localStorage o querystring).
- Cambiar idioma no afecta la conversión de moneda y viceversa.
- Los selectores de idioma y moneda usan la misma lógica y clases activas en todas las páginas.
- Al navegar o cambiar idioma/moneda, toda la navegación y los contenidos se mantienen en ese idioma y moneda.

---

## 11. .gitignore recomendado

- Incluir reglas para:
  - Node.js (node_modules, logs)
  - Mac, Linux y Windows (archivos de sistema)
  - IDEs (VSCode, JetBrains, etc.)
  - Archivos generados automáticamente y de configuración local
  - No subir logs, cachés, temporales, ni archivos vacíos

---

## 12. Propuestas y mejoras futuras

- Integrar APIs de tipo de cambio, reservas, mapas, etc.
- Formularios para agregar notas y gastos diarios.
- Visualización de presupuesto con tablas, tarjetas, o gráficos.
- Documentar scripts de automatización de datos.
- Internacionalización: README en español, inglés y hebreo.
-Sincronizar eventos automáticamente con tu archivo de ciudades.
-Mejorar UI (más íconos, colores por tipo, edición de reservas, exportar PDF, etc.).
-Permitir agregar eventos personalizados.

---

## 13. Ciudades y destinos incluidos

- Buenos Aires
- Rosario
- Bariloche
- Mendoza
- Malargüe
- Jujuy
- Iguazú
- Corrientes
- Iberá
- Mapa Interactivo

---
Flujo del Itinerario
Buenos Aires (inicio)
Rosario
Mendoza
Malargüe
Jujuy
Cataratas del Iguazú
Corrientes
Esteros del Iberá
Buenos Aires (regreso)

## 14. Estructura de las páginas

### 14.1 Estructura de index.html (página principal)

- Es la página principal del itinerario del viaje y debe contener:
  - Barra superior fija a la derecha con selectores de idioma y moneda, usando las mismas clases y estructura para los botones en todas las páginas.
  - Título principal y bienvenida.
  - Lista de ciudades/destinos, cada una con su link correspondiente a la página de ciudad.
  - Tabla de transporte entre ciudades, con nombres de compañías como enlace (no columna web).
  - (Opcional) Sección de atracciones destacadas (ej: Corrientes) según corresponda.
  - Módulos interactivos al final (antes de `</body>`): conversor de moneda moderno, lista de equipaje, y consulta a IA, todos integrados y funcionando.
  - Traducción dinámica de textos y soporte multilenguaje para todos los componentes y módulos.
  - Consistencia visual y funcional en todos los elementos y botones.
  - Al hacer clic en "⬅ Volver al itinerario" desde cualquier página de ciudad, debe retornar a `index.html`.

### 14.2 Estructura de páginas de ciudad (por ejemplo: ciudades/rosario.html)

- Cada página de ciudad debe tener la siguiente estructura:
  - Barra superior fija arriba a la derecha, con el mismo diseño y funcionalidad que en index.html: botones de idioma, selector de moneda (si aplica), y botón "⬅ Volver al itinerario" (link a `/index.html`).
  - Título con el nombre de la ciudad, traducido dinámicamente.
  - Foto de portada correspondiente, cargada desde `docs/imagenes/[ciudad].jpg` (el nombre del archivo debe ser igual al de la ciudad en minúsculas, sin espacios ni tildes).
  - Secciones principales: breve introducción, actividades recomendadas, gastronomía, alojamiento, agenda de eventos, atracciones, presupuesto orientativo y consejos para familias.
  - Cada sección debe tener su propio título y contenido, ambos traducibles dinámicamente.
  - El menú de navegación y todos los botones deben usar las mismas clases e IDs que en index.html para que la traducción y la experiencia sean consistentes.
  - Todos los enlaces internos (a otras ciudades/mapa/etc.) deben funcionar igual y mantenerse en el idioma seleccionado.
  - El diseño, IDs, y clases deben ser los mismos en todas las páginas de ciudad.
  - Si se agregan módulos adicionales (ejemplo: galería, comentarios, etc.), se deben ubicar después del contenido principal y antes de `</body>`, siguiendo la misma lógica de integración que los módulos de la página principal.

---

**IMPORTANTE:**  
- Toda nueva instrucción debe agregarse en este archivo, bajo el tema correspondiente.  
- Si tienes dudas o surge un conflicto entre pedidos, CONSÚLTALO antes de decidir.

---

Recomendaciones según tu objetivo de crear una web interactiva integrando MCP y facilitando el proceso de desarrollo y colaboración con GitHub Copilot:

1. Visual Studio Code (VSCode)
Imprescindible si aún no lo usás. Es el editor más flexible para proyectos web modernos.
Extensión recomendada:
GitHub Copilot (para autocompletado inteligente).
GitHub Copilot Chat (interacción conversacional integrada).
Gestión de MCP:
Soporte completo para Node.js, React, Python, etc.
Terminal integrada para correr scripts y servidores.
2. Extensiones útiles para proyectos MCP / Web
Prettier: Autoformato de código.
ESLint: Linter para JavaScript/React.
Live Server: Vista previa instantánea de HTML/JS/CSS.
Markdown Preview Enhanced: Para trabajar con la documentación en Markdown.
REST Client: Probar APIs de tu backend MCP desde el propio editor.
Thunder Client: Alternativa sencilla a Postman para testeo de APIs REST.
3. Git y GitHub
Extensión de GitHub en VSCode para hacer commits, push, pull y revisión de PRs desde el editor.
GitLens: Para análisis avanzado de historial y autoría de código.
4. MCP (Modelo Cliente-Servidor)
Si te referís a frameworks o herramientas para facilitar el desarrollo MCP:

Si usás Node.js, asegurate de tener Node.js y npm instalados.
Para backend en Python: Python, pip y frameworks como Flask o FastAPI.
Si querés desarrollo “fullstack” integrado: Vite o Create React App para React.
No hay una extensión “MCP” oficial, pero sí muchas para facilitar cliente-servidor:

Thunder Client o REST Client para probar APIs.
Docker (si pensás dockerizar).
5. Opcional: AI y asistencia
Tabnine: Alternativa/extra de AI para autocompletado.
Kite: Otro complemento de AI (menos popular que Copilot, pero útil).

1. Mejorar la navegación visualmente
Podés usar una lista (<ul>) o agregar algo de padding para que la navegación se vea mejor.

2. Resaltar el link activo
Con NavLink de React Router, podés resaltar el enlace actual automáticamente.

3. Usar App.jsx en vez de App.js (opcional)
La convención en proyectos modernos con React + Vite es usar .jsx para componentes con JSX, pero ambos funcionan.

TU FLUJO DE TRABAJO IDEAL
Abrí el archivo con Notepad, VS Code o Notepad++

Si el archivo no existe, crealo desde el explorador de archivos de Windows o desde tu editor.
Copiá el código que te paso y pegalo en el archivo.

Guardá el archivo.

En GitHub Desktop:

Verificá los cambios (deberían aparecer listados).
Poné un mensaje de commit (ej: "agrego main.jsx").
Hacé Commit y luego Push.
Refrescá en GitHub web para ver los cambios reflejados.

Mejoras en el Código:

Separar las traducciones en archivos JSON independientes dentro de /locales/ para facilitar el mantenimiento
Implementar un sistema de rutas más limpio
Crear componentes reutilizables para elementos comunes como el header y footer
Implementar un sistema de templates para reducir la duplicación de código HTML
Optimizaciones Técnicas:

Implementar manejo de caché para recursos estáticos
Minificar archivos CSS y JavaScript para producción
Optimizar las imágenes para mejor rendimiento
Implementar lazy loading para imágenes y contenido
Mejoras de Accesibilidad:

Añadir atributos ARIA para mejor accesibilidad
Mejorar el contraste de colores
Asegurar que todos los elementos interactivos sean accesibles por teclado
Incluir textos alternativos para todas las imágenes
Documentación:

Crear un archivo CONTRIBUTING.md con guías de contribución
Mejorar la documentación en el README.md
Añadir comentarios explicativos en el código
Documentar el sistema de traducciones
Gestión de Estado:

Implementar un sistema de gestión de estado más robusto para manejar las preferencias de idioma y moneda
Guardar las preferencias del usuario en localStorage
Mejoras en el Sistema de Traducciones:

Centralizar todas las cadenas de texto en archivos de idioma
Implementar un sistema de fallback para traducciones faltantes
Añadir soporte para más idiomas de manera escalable
SEO y Metadatos:

Mejorar los metadatos para SEO
Añadir Open Graph tags para compartir en redes sociales
Implementar un sitemap.xml
Añadir un robots.txt
Estilos y Diseño:

Implementar un sistema de diseño consistente
Usar variables CSS para una gestión más fácil de colores y temas
Mejorar la responsividad para diferentes dispositivos
Implementar temas claro/oscuro
Testing:

Añadir tests unitarios para las funciones JavaScript
Implementar tests de integración
Añadir pruebas de accesibilidad automatizadas
Implementar pruebas de rendimiento
Manejo de Errores:

Implementar un sistema de manejo de errores más robusto
Añadir páginas de error personalizadas (404, 500)
Implementar logging de errores
Seguridad:

Implementar headers de seguridad
Sanitizar inputs de usuario
Proteger contra XSS y otros vectores de ataque comunes
Performance:

Implementar service workers para funcionalidad offline
Optimizar el critical rendering path
Implementar code splitting para reducir el tamaño inicial de la carga
Control de Versiones:

Añadir un archivo .gitignore apropiado
Implementar conventional commits
Configurar GitHub Actions para CI/CD
